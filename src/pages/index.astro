---
import type { MarkdownInstance } from 'astro/dist/@types/astro';

import { Hero } from '@/partials/Hero';
import { RecentMeetups } from '@/partials/Meetups';
import { RecentPosts } from '@/partials/RecentPosts';
import Base from '@/templates/Base.astro';
import type { IFrontmatter, IMeetupFrontMatter } from '@/types';
import { AppConfig } from '@/utils/AppConfig';
import { sortByDate, sortByMeetupDate } from '@/utils/Posts';

let allPosts: MarkdownInstance<IFrontmatter>[] = [];
try {
  allPosts = await Astro.glob<IFrontmatter>('./posts/*.md');
} catch (e) {
  // ignore no files found
}

const sortedPosts = sortByDate(allPosts);
const lastThreePosts = sortedPosts.slice(0, 3);

const allMeetups = await Astro.glob<IMeetupFrontMatter>('./meetups/*.md');
const sortedMeetups = sortByMeetupDate(allMeetups);
const lastThreeMeetups = sortedMeetups.slice(0, 3);

const { title } = AppConfig;
const { description } = AppConfig;
---

<Base head={{ title, description }}>
  <Hero />
  <RecentMeetups postList={lastThreeMeetups} />
  {lastThreePosts.length > 0 ? (
    <RecentPosts postList={lastThreePosts} />
  ) : undefined}
</Base>
